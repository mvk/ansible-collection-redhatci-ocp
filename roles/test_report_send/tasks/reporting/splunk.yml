# SPDX-License-Identifier: Apache-2.0
---
# Splunk reporting tasks for redhatci.ocp.test_report_send

- name: Read content from test report JSON file
  ansible.builtin.slurp:
    src: "{{ trs_report_path }}"
  register: _trs_json_file_content

- name: Decode JSON content of test report file
  ansible.builtin.set_fact:
    trs_test_data: "{{ _trs_json_file_content.content | b64decode | from_json | default({}) }}"
  when:
    _trs_json_file_content.content | length > 0

- name: Print currently used timestamp trs_default_ts
  ansible.builtin.debug:
    var: trs_default_ts
  when:
    - ansible_verbosity | default(0) > 1

- name: Setup job timestamps broken down to int/float parts for {{ trs_collector }}
  ansible.builtin.set_fact:
    trs_job_time_int: "{{ (trs_meta_data.job.created_at | \
      default(trs_default_ts, true) | \
      regex_replace('\\..*$', '') | \
      to_datetime('%Y-%m-%dT%H:%M:%S')).strftime('%s') | int }}"
    trs_job_time_fraction: "{{ trs_meta_data.job.created_at | \
      default(trs_default_ts, true) | \
      regex_replace('^.*\\.', '0.') | float | round(3) }}"
  when:
    - trs_meta_data.job | length > 0
    - trs_meta_data.job.created_at | length > 0

- name: Setup job timestamps as floats for reporting
  ansible.builtin.set_fact:
    trs_job_time: "{{ (trs_job_time_int | int) + (trs_job_time_fraction | float) }}"
  when:
    - trs_job_time_int is defined
    - trs_job_time_fraction is defined

- name: Update job.created_at as float for reporting
  ansible.builtin.set_fact:
    trs_meta_data: "{{ trs_meta_data | combine({'job': trs_meta_data.job | combine({'created_at': trs_job_time})}) }}"
  when:
    - trs_job_time_int is defined
    - trs_job_time_fraction is defined

- name: Setup pipeline timestamps broken down to int/float parts for {{ trs_collector }}
  ansible.builtin.set_fact:
    trs_pipeline_time_int: "{{ (trs_meta_data.pipeline.created_at | \
      default(trs_default_ts, true) | \
      regex_replace('\\..*$', '') | \
      to_datetime('%Y-%m-%dT%H:%M:%S')).strftime('%s') | int }}"
    trs_pipeline_time_fraction: "{{ trs_meta_data.pipeline.created_at | \
      default(trs_default_ts, true) | \
      regex_replace('^.*\\.', '0.') | float | round(3) }}"
  when:
    - trs_meta_data.pipeline | length > 0
    - trs_meta_data.pipeline.created_at | length > 0

- name: Setup pipeline timestamps as floats for reporting
  ansible.builtin.set_fact:
    trs_pipeline_time: "{{ (trs_pipeline_time_int | int) + (trs_pipeline_time_fraction | float) }}"
  when:
    - trs_pipeline_time_int is defined
    - trs_pipeline_time_fraction is defined

- name: Update pipeline.created_at as float for reporting
  ansible.builtin.set_fact:
    trs_meta_data: "{{ trs_meta_data | combine({'pipeline': trs_meta_data.pipeline | \
      combine({'created_at': trs_pipeline_time})}) }}"
  when:
    - trs_pipeline_time_int is defined
    - trs_pipeline_time_fraction is defined

- name: Update trs_collector_auth_headers with trs_collector_auth_token from the user for {{ trs_collector }}
  ansible.builtin.set_fact:
    trs_collector_auth_headers: "{{ (trs_collector_auth_headers | default({})) | \
      combine({'Authorization': 'Splunk ' ~ trs_collector_auth_token}) }}"
  when:
    - trs_collector_auth_token | default('') | length > 0
    - trs_collector

- name: Update trs_collector_auth_headers with trs_collector_target from the user for {{ trs_collector }}
  ansible.builtin.set_fact:
    trs_collector_auth_headers: "{{ (trs_collector_auth_headers | default({})) | \
      combine({'X-Splunk-Request-Channel': trs_collector_target}) }}"
  when:
    - trs_collector_target | length > 0

- name: Set allowed status codes
  ansible.builtin.set_fact:
    trs_http_status_codes:
      HEAD:
        - 200
      POST:
        - 200
        - 201
        - 202

- name: Add 403 to HEAD status codes for mock collectors
  ansible.builtin.set_fact:
    trs_http_status_codes: "{{ trs_http_status_codes | combine({'HEAD': [200, 403]}) }}"
  when:
    - not trs_do_send


- name: Validate splunk related data
  ansible.builtin.include_tasks:
    file: "validations.yml"

- name: Create event data attributes
  ansible.builtin.set_fact:
    trs_event:
      test: "{{ trs_test_data }}"
      metadata: "{{ trs_meta_data }}"

- name: Print event data before timestamp corrections
  ansible.builtin.debug:
    var: trs_event
  when:
    - ansible_verbosity | default(0) > 1


# data conversion copied from @cplacani PR: https://github.com/openshift-kni/eco-validation/pull/150/files

- name: Combine additional attributes into the data at trs_collector_target for {{ trs_collector }}
  ansible.builtin.set_fact:
    trs_event_payload:
      "source": "{{ trs_collector_source | default(ansible_hostname) }}"
      "event": "{{ trs_event }}"
      "host": "{{ trs_collector_url | default(ansible_hostname) }}"
      "sourcetype": "_json"

- name: Print variable trs_event_dump_file
  ansible.builtin.include_tasks:
    file: "dump-file.yml"
  vars:
    trs_file_path: "{{ trs_event_dump_file }}"
  when:
    - trs_event_dump_file | default('') | length > 0
    - trs_event_save

- name: Send data to {{ trs_collector }}
  ansible.builtin.uri:
    url: "{{ trs_collector_url }}"
    method: POST
    headers: "{{ trs_collector_auth_headers | default(omit) }}"
    body: "{{ trs_event_payload }}"
    body_format: json
    follow_redirects: all
    validate_certs: "{{ not (trs_allow_self_signed_certs | default(false)) }}"
    timeout: "{{ global_request_timeout | default(omit) }}"
  register: _trs_splunk_response
  ignore_errors: true
  when:
    - trs_do_send | default(false)

- name: Verify status code is good
  ansible.builtin.assert:
    that:
      - _trs_splunk_response.status | default(0) in trs_http_status_codes.POST
    fail_msg: >-
      The Splunk POST response status code is {{ _trs_splunk_response.status }}.
      It did not match the expected codes: {{ trs_http_status_codes.POST }}
    success_msg: "The Splunk response status code is good"
  when:
    - trs_do_send | default(false)
