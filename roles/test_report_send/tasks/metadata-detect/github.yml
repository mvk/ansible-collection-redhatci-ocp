# SPDX-License-Identifier: Apache-2.0
---
# GitHub metadata detection tasks for redhatci.ocp.test_report_send

- name: Update is_ci in trs_ci_runtime attribute for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    trs_ci_runtime: "{{ trs_ci_runtime | combine({'is_ci': true}) }}"

- name: Update helper variables for trs_ci_runtime attributes for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    _ci: {'type': "{{ trs_ci_system }}"}
    _pipeline: {}
    _job: {}
    _source: {}
    github_event_payload_parsed: {}
    _change_url: ''
    _repo_url: "{{ lookup('env', 'GITHUB_SERVER_URL') | default('') }}/{{ lookup('env', 'GITHUB_REPOSITORY') | default('') }}"

- name: Load and parse GITHUB_EVENT_PATH content
  ansible.builtin.set_fact:
    github_event_payload_parsed: "{{ lookup('file', lookup('env', 'GITHUB_EVENT_PATH')) | default('{}') | from_json }}"
  when:
    - lookup('env', 'GITHUB_EVENT_PATH') is defined
    - lookup('env', 'GITHUB_EVENT_PATH') != ''
    - lookup('env', 'GITHUB_EVENT_PATH') != 'N/A'

- name: Setup _change_url based on event github_event_payload_parsed data
  ansible.builtin.set_fact:
    _change_url: "{{ github_event_payload_parsed.pull_request.html_url }}"
  when:
    - _change_url | length == 0
    - (lookup('env', 'GITHUB_EVENT_NAME') | default('')) == 'pull_request'
    - github_event_payload_parsed.pull_request is defined
    - github_event_payload_parsed.pull_request.html_url is defined

- name: Ensure _repo_url is properly set
  ansible.builtin.assert:
    that: "{{ condition }}"
    fail_msg: "Condition failed: {{ condition }}"
  loop:
    - lookup('env', 'GITHUB_SERVER_URL') | default('') | length > 0
    - lookup('env', 'GITHUB_REPOSITORY') | default('') | length > 0
    - _repo_url is defined
  loop_control:
    loop_var: condition

- name: Setup change URL for push event
  ansible.builtin.set_fact:
    _change_url: "{{ _repo_url }}/commit/{{ lookup('env', 'GITHUB_SHA') }}"
  when:
    - _change_url | default('') | length == 0
    - lookup('env', 'GITHUB_EVENT_NAME') | default('') == 'push'
    - lookup('env', 'GITHUB_SHA') | default('') | length > 0

- name: Setup change URL for other types of events
  ansible.builtin.set_fact:
    _change_url: "{{ _repo_url }}/actions/runs/{{ lookup('env', 'GITHUB_RUN_ID') | default('N/A') }}"
  when:
    - _change_url | default('') | length == 0

- name: Build current _ci for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    _ci:
      type: "{{ trs_ci_system }}"
      server_url: "{{ lookup('env', 'GITHUB_SERVER_URL') | default('N/A') }}"
      workspace: "{{ lookup('env', 'GITHUB_WORKSPACE') | default('N/A') }}"
      runner:
        name: "{{ lookup('env', 'RUNNER_NAME') | default('N/A') }}"
        os: "{{ lookup('env', 'RUNNER_OS') | default('N/A') }}"
        arch: "{{ lookup('env', 'RUNNER_ARCH') | default('N/A') }}"
        labels: "{{ lookup('env', RUNNER_LABELS) | default('') }}"


- name: Build current _pipeline for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    _pipeline:
      name: "{{ lookup('env', 'GITHUB_WORKFLOW') | default('N/A') }}"
      event_name: "{{ lookup('env', 'GITHUB_EVENT_NAME') | default('N/A') }}"
      id: "{{ lookup('env', 'GITHUB_RUN_ID') | default('N/A') }}"
      attempt: "{{ lookup('env', 'GITHUB_RUN_ATTEMPT') | default('N/A') }}"
      number: "{{ lookup('env', 'GITHUB_RUN_NUMBER') | default('N/A') }}"
      url: "{{ lookup('env', 'GITHUB_SERVER_URL') }}/{{ lookup('env', 'GITHUB_REPOSITORY') }}/actions/runs/{{ lookup('env', 'GITHUB_RUN_ID') }}"
      # Final status of the entire pipeline is not available via env var during a job's run.
      # This reflects the assumption that if this job is running, the pipeline is also "running".
      status: "running (current pipeline assumed)"
      event_action: "{{ github_event_payload_parsed.action | default('N/A') if github_event_payload_parsed else 'N/A' }}"

- name: Build current _job for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    _job:
      id: "{{ lookup('env', 'GITHUB_JOB') | default('N/A') }}" # Job ID from workflow file
      # The final status of the current job isn't available as an env var during its own execution.
      # It can be 'running' or more accurately, determined via API or context after completion.
      status_current: "running (assumed)"
      url: "{{ lookup('env', 'GITHUB_SERVER_URL') }}/{{ lookup('env', 'GITHUB_REPOSITORY') }}/actions/runs/{{ lookup('env', 'GITHUB_RUN_ID') }}"


- name: Setup API run URL helpers
  ansible.builtin.set_fact:
    _api_url: "{{ lookup('env', 'GITHUB_API_URL') }}"
    _repo: "{{ lookup('env', 'GITHUB_REPOSITORY') }}"
  when:
    - lookup('env', 'GITHUB_API_URL') | default('') | length > 0
    - lookup('env', 'GITHUB_REPOSITORY') | default('') | length > 0

- name: Assert helpers are valid
  ansible.builtin.assert:
    that: "{{ condition }}"
    fail_msg: "Condition failed: {{ condition }}"
  loop:
    _api_url | default('') | length > 0
    _repo | default('') | length > 0
  loop_control:
    loop_var: condition

- name: Setup current workflow_api_url
  ansible.builtin.set_fact:
    _workflow_api_url: "{{ _api_url }}/repos/{{ _repo }}/actions/runs/{{ _pipeline.id }}"

- name: Fetch all job statuses for the current workflow run
  ansible.builtin.uri:
    url: "{{ _workflow_api_url }}/jobs?per_page={{ github.per_page }}"
    method: GET
    headers: "{{ github.auth_headers | default(omit) }}"
    status_code: 200
    timeout: "{{ github.req_timeout | default(omit) }}"
  register: github_workflow_jobs_response
  ignore_errors: true # Do not halt if the API call fails for some reason

- name: Process and add jobs infos to _pipeline
  ansible.builtin.set_fact:
    _pipeline: "{{ _pipeline | combine({'jobs': processed_peer_jobs}) }}"
  vars:
    processed_peer_jobs: |
      {% set jobs_list = [] %}
      {% if ((github_workflow_jobs_response.status == 200) and
            (github_workflow_jobs_response.json is defined) and
            (github_workflow_jobs_response.json.jobs is defined)) %}
        {% for job_run in github_workflow_jobs_response.json.jobs %}
          {% if job_run.name != (lookup('env', 'GITHUB_JOB') | default('THIS_JOB_CANNOT_BE_NAMED_LIKE_THIS_HOPEFULLY')) %}
            {% set job_final_status = job_run.conclusion if job_run.status == 'completed' else job_run.status %}
            {% set _ = jobs_list.append({
              'name': job_run.name,
              'status_api': job_run.status,
              'conclusion_api': job_run.conclusion | default(None),
              'status': job_final_status,
              'id_api': job_run.id,
              'html_url': job_run.html_url | default('N/A')
              })
            %}
          {% endif %}
        {% endfor %}
      {% endif %}
      {{ jobs_list }}

- name: Build current _source for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    _source:
      ref: "{{ lookup('env', 'GITHUB_REF') | default('N/A') }}"
      ref_name: "{{ lookup('env', 'GITHUB_REF_NAME') | default('N/A') }}"
      ref_type: "{{ lookup('env', 'GITHUB_REF_TYPE') | default('N/A') }}"
      sha: "{{ lookup('env', 'GITHUB_SHA') | default('N/A') }}"
      change_url: "{{ _change_url }}"
      actor: "{{ lookup('env', 'GITHUB_ACTOR') | default('N/A') }}"
      server_url: "{{ lookup('env', 'GITHUB_SERVER_URL') | default('N/A') }}"
      owner: "{{ lookup('env', 'GITHUB_REPOSITORY_OWNER') | default('N/A') }}"
      repo: "{{ _repo }}"
      event_payload: "{{ github_event_payload_parsed | default({}) }}"
      pr:
        number: >-
          {{- github_event_payload_parsed.number | default(github_event_payload_parsed.pull_request.number | default('N/A'))
              if lookup('env', 'GITHUB_EVENT_NAME') == 'pull_request' and github_event_payload_parsed else 'N/A' -}}
        base: >-
          {{- lookup('env', 'GITHUB_BASE_REF') | default('N/A')
              if lookup('env', 'GITHUB_EVENT_NAME') == 'pull_request' else 'N/A' -}}
        head: >-
          {{- lookup('env', 'GITHUB_HEAD_REF') | default('N/A')
              if lookup('env', 'GITHUB_EVENT_NAME') == 'pull_request' else 'N/A' -}}

- name: Construct the final trs_ci_runtime dictionary for {{ trs_ci_system }}
  ansible.builtin.set_fact:
    trs_ci_runtime: "{{ combine({item.key: item.value}) }}"
  loop:
    - key: ci
      value: "{{ _ci }}"
    - key: pipeline
      value: "{{ _pipeline }}"
    - key: job
      value: "{{ _job }}" # Now _job_info contains current job details and peer_jobs array
    - key: source
      value: "{{ _source }}"
